<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[MAC链接Windows Server 2012 服务器]]></title>
    <url>%2F2017%2F11%2F29%2FMAC%2F</url>
    <content type="text"><![CDATA[MAC链接Windows Server 2012 服务器@(远程桌面连接无法验证您希望连接的计算机的身份) mac和windows连接服务器有所不同概述： 1 ：下载Mac 版远程桌面连接； 2 ：输入ip地址-&gt;点击连接； 3 ：报错提示-&gt;远程桌面连接无法验证您希望连接的计算机的身份windows连接服务器概述： 4 ：windows系统电脑登录-&gt;同上打开远程桌面连接-&gt;输入ip 5 ：连接成功-&gt;输入用户名和密码 6 ：登录成功-&gt;点击开始-&gt;选择控制面板-&gt;系统和安全-&gt;允许远程访问-&gt;属性设置-&gt;选择‘允许远程连接此计算机 ‘（注：只设置这个就ok-&gt;确定 以上都设置OK后再次用mac连接服务器概述： 7 ：此刻输入ip再次连接(不会报错)-&gt;输入账号密码就可以登录进来了]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>连接服务器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markDown 格式代码]]></title>
    <url>%2F2017%2F11%2F18%2FmarkDown%E6%A0%BC%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[一级标题二级标题三级标题四级标题五级标题六级标题 这是备注说明 这是第一条 这是第二条 这是第三条 这是无序列表 这是无序列表 这是无序列表 123456789101112131415161718new Vue(&#123; // state 模型(model) data () &#123; return &#123; count: 0 &#125; &#125;, // view 视图(view) template: ` &lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt; `, // actions 控制器(controller) methods: &#123; increment () &#123; this.count++ &#125; &#125;&#125;) 这是斜体，这是加粗]]></content>
      <categories>
        <category>MarkDown</category>
        <category>格式</category>
      </categories>
      <tags>
        <tag>VUE</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VUEX]]></title>
    <url>%2F2017%2F11%2F16%2FVUEX%2F</url>
    <content type="text"><![CDATA[Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化 vuex是什么 Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化 Vuex 类似 Redux 的状态管理器，用来管理Vue的所有组件状态。说白了就是控制应用的一些全局状态。状态改变了，对应的视图也会改变。 什么是“状态管理模式”？123456789101112131415161718new Vue(&#123; // state 模型(model) data () &#123; return &#123; count: 0 &#125; &#125;, // view 视图(view) template: ` &lt;div&gt;&#123;&#123; count &#125;&#125;&lt;/div&gt; `, // actions 控制器(controller) methods: &#123; increment () &#123; this.count++ &#125; &#125;&#125;) 这个状态自管理应用包含以下几个部分： state，驱动应用的数据源 view，以声明方式将 state 映射到视图； actions，响应在 view 上的用户输入导致的状态变化。 以下是一个表示“单向数据流”理念的极简示意： 为什么使用vuex 传参的方法对于多层嵌套的组件将会非常繁琐，并且对于兄弟组件间的状态传递无能为力 多个视图依赖于同一状态。或者 来自不同视图的行为需要变更同一状态。 VUEX 流程 从上图可以看出 在 vue Components 派发了（dispatch) 一个行为 (Actions) 在Actions 中通过 commit 去触发转变 (Mutations ) 在Mutations 中去更新 state 最后触发视图的更新 VUEX 核心概念State state 定义了应用状态的数据结构，同样可以在这里设置默认的初始状态。 123456export default &#123; user: &#123; nickname : &apos;这是一只二哈&apos;, login_name : &apos;&apos;, &#125;&#125; Action Action 提交的是 mutation，而不是直接变更状态。 Action 可以包含任意异步操作。 Actions 即是定义提交触发更改信息的描述，常见的例子有从服务端获取数据，在数据获取完成后会调用store.commit()来调用更改 Store 中的状态。可以在组件中使用dispatch来发出 Actions。1234567891011export default &#123; setUser :(context ,data=&#123;&#125;)=&gt;&#123; console.log(&apos;context =========&gt;&apos;,context ); console.log(&apos;这是mutations=========&gt;&apos;,data); context.commit(&apos;SET_USER&apos;,data) &#125;, setLoginStatus:(&#123;commit&#125;,data=&#123;&#125;)=&gt;&#123; console.log(&apos;这是mutations=========&gt;&apos;,data); commit(&apos;SET_LOGINSTATUS&apos;,data); &#125;&#125; 在组件中分发 Action在Actions对象中 对应的键是暴露在外面 可以用this.$store.dispatch(&#39;xxx&#39;) 触发 或者 在视图中用mapActions 辅助函数将 组件的method 映射为1234567891011121314151617181920import &#123; mapActions &#125; from &apos;vuex&apos;export default &#123; // ... methods: &#123; ...mapActions([ // 将 `this.increment()` 映射为 `this.$store.dispatch(&apos;increment&apos;)` &apos;increment&apos;, // `mapActions` 也支持载荷： // 将 `this.incrementBy(amount)` 映射为 // `this.$store.dispatch(&apos;incrementBy&apos;, amount)` &apos;incrementBy&apos; ]), ...mapActions(&#123; // 将 `this.add()` 映射为 `this.$store.dispatch(&apos;increment&apos;)` add: &apos;increment&apos; &#125;) &#125;&#125; 组合 ActionAction 通常是异步的，那么如何知道 action 什么时候结束呢？更重要的是，我们如何才能组合多个 action，以处理更加复杂的异步流程？ 首先，你需要明白 store.dispatch 可以处理被触发的 action 的处理函数返回的 Promise，并且 store.dispatch 仍旧返回 Promise：12345678910actions: &#123; actionA (&#123; commit &#125;) &#123; return new Promise((resolve, reject) =&gt; &#123; setTimeout(() =&gt; &#123; commit(&apos;someMutation&apos;) resolve() &#125;, 1000) &#125;) &#125;&#125; 现在你可以：123store.dispatch(&apos;actionA&apos;).then(() =&gt; &#123; // ...&#125;) 在另外一个 action 中也可以：12345678actions: &#123; // ... actionB (&#123; dispatch, commit &#125;) &#123; return dispatch(&apos;actionA&apos;).then(() =&gt; &#123; commit(&apos;someOtherMutation&apos;) &#125;) &#125;&#125; 最后，如果我们利用 async / await 这个 JavaScript 即将到来的新特性，我们可以像这样组合 action：1234567891011// 假设 getData() 和 getOtherData() 返回的是 Promiseactions: &#123; async actionA (&#123; commit &#125;) &#123; commit(&apos;gotData&apos;, await getData()) &#125;, async actionB (&#123; dispatch, commit &#125;) &#123; await dispatch(&apos;actionA&apos;) // 等待 actionA 完成 commit(&apos;gotOtherData&apos;, await getOtherData()) &#125;&#125; Mutation mutations: 调用 mutations 是唯一允许更新应用状态的地方。 Mutation 必须是同步函数 更改 Vuex 的 store 中的状态的唯一方法是提交 mutation。Vuex 中的 mutation 非常类似于事件：每个 mutation 都有一个字符串的 事件类型 (type) 和 一个 回调函数 (handler)。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数：1234567891011const store = new Vuex.Store(&#123; state: &#123; count: 1 &#125;, mutations: &#123; increment (state) &#123; // 变更状态 state.count++ &#125; &#125;&#125;) 你不能直接调用一个 mutation handler。这个选项更像是事件注册：“当触发一个类型为 increment 的 mutation 时，调用此函数。”要唤醒一个 mutation handler，你需要以相应的 type 调用 store.commit 方法：1store.commit(&apos;increment&apos;,data) Mutation 需遵守 Vue 的响应规则既然 Vuex 的 store 中的状态是响应式的，那么当我们变更状态时，监视状态的 Vue 组件也会自动更新。这也意味着 Vuex 中的 mutation 也需要与使用 Vue 一样遵守一些注意事项： 最好提前在你的 store 中初始化好所有所需属性。 当需要在对象上添加新属性时，你应该 使用 Vue.set(obj, &#39;newProp&#39;, 123), 或者 以新对象替换老对象。例如，利用对象展开运算符我们可以这样写：state.obj = { ...state.obj, newProp: 123 } Getter有时候我们需要从 store 中的 state 中派生出一些状态，例如对列表进行过滤并计数：12345computed: &#123; doneTodosCount () &#123; return this.$store.state.todos.filter(todo =&gt; todo.done).length &#125;&#125; 如果有多个组件需要用到此属性，我们要么复制这个函数，或者抽取到一个共享函数然后在多处导入它——无论哪种方式都不是很理想。 Vuex 允许我们在 store 中定义“getter”（可以认为是 store 的计算属性）。就像计算属性一样，getter 的返回值会根据它的依赖被缓存起来，且只有当它的依赖值发生了改变才会被重新计算。 Getter 接受 state 作为其第一个参数：12345678910111213const store = new Vuex.Store(&#123; state: &#123; todos: [ &#123; id: 1, text: &apos;...&apos;, done: true &#125;, &#123; id: 2, text: &apos;...&apos;, done: false &#125; ] &#125;, getters: &#123; doneTodos: state =&gt; &#123; return state.todos.filter(todo =&gt; todo.done) &#125; &#125;&#125;) Getter 会暴露为 store.getters 对象：1store.getters.doneTodos // -&gt; [&#123; id: 1, text: &apos;...&apos;, done: true &#125;] Getter 也可以接受其他 getter 作为第二个参数：1234567getters: &#123; // ... doneTodosCount: (state, getters) =&gt; &#123; return getters.doneTodos.length &#125;&#125;store.getters.doneTodosCount // -&gt; 1 我们可以很容易地在任何组件中使用它：12345computed: &#123; doneTodosCount () &#123; return this.$store.getters.doneTodosCount &#125;&#125; mapGetters 辅助函数mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性：12345678910111213import &#123; mapGetters &#125; from &apos;vuex&apos;export default &#123; // ... computed: &#123; // 使用对象展开运算符将 getter 混入 computed 对象中 ...mapGetters([ &apos;doneTodosCount&apos;, &apos;anotherGetter&apos;, // ... ]) &#125;&#125; 如果你想将一个 getter 属性另取一个名字，使用对象形式：1234mapGetters(&#123; // 映射 `this.doneCount` 为 `store.getters.doneTodosCount` doneCount: &apos;doneTodosCount&apos;&#125;) 插件Vuex 的 store 接受 plugins 选项，这个选项暴露出每次 mutation 的钩子。Vuex 插件就是一个函数，它接收 store 作为唯一参数：1234567const myPlugin = store =&gt; &#123; // 当 store 初始化后调用 store.subscribe((mutation, state) =&gt; &#123; // 每次 mutation 之后调用 // mutation 的格式为 &#123; type, payload &#125; &#125;)&#125; 然后像这样使用：1234const store = new Vuex.Store(&#123; // ... plugins: [myPlugin]&#125;) 在插件内提交 Mutation在插件中不允许直接修改状态——类似于组件，只能通过提交 mutation 来触发变化。 通过提交 mutation，插件可以用来同步数据源到 store。例如，同步 websocket 数据源到 store（下面是个大概例子，实际上 createPlugin 方法可以有更多选项来完成复杂任务）：12345678910111213141516171819export default function createWebSocketPlugin (socket) &#123; return store =&gt; &#123; socket.on(&apos;data&apos;, data =&gt; &#123; store.commit(&apos;receiveData&apos;, data) &#125;) store.subscribe(mutation =&gt; &#123; if (mutation.type === &apos;UPDATE_DATA&apos;) &#123; socket.emit(&apos;update&apos;, mutation.payload) &#125; &#125;) &#125;&#125;const plugin = createWebSocketPlugin(socket)const store = new Vuex.Store(&#123; state, mutations, plugins: [plugin]&#125;) 内置 Logger 插件Vuex 自带一个日志插件用于一般的调试:12345import createLogger from &apos;vuex/dist/logger&apos;const store = new Vuex.Store(&#123; plugins: [createLogger()]&#125;) createLogger 函数有几个配置项：12345678910111213141516171819const logger = createLogger(&#123; collapsed: false, // 自动展开记录的 mutation filter (mutation, stateBefore, stateAfter) &#123; // 若 mutation 需要被记录，就让它返回 true 即可 // 顺便，`mutation` 是个 &#123; type, payload &#125; 对象 return mutation.type !== &quot;aBlacklistedMutation&quot; &#125;, transformer (state) &#123; // 在开始记录之前转换状态 // 例如，只返回指定的子树 return state.subTree &#125;, mutationTransformer (mutation) &#123; // mutation 按照 &#123; type, payload &#125; 格式记录 // 我们可以按任意方式格式化 return mutation.type &#125;, logger: console, // 自定义 console 实现，默认为 `console`&#125;)]]></content>
      <categories>
        <category>前端</category>
        <category>VUE</category>
      </categories>
      <tags>
        <tag>VUE</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Github 生成 ssh key]]></title>
    <url>%2F2017%2F11%2F15%2FgitHub_1%2F</url>
    <content type="text"><![CDATA[Git 生成 ssh key1. 打开 git bash1ssh-keygen -t rsa -C &quot;youremail@exmple.com&quot; 一直回车就可以 如果想每次push时候输入密码 就填写push时候输入的密码 2. 测试OK。输入命令1ssh -T git@github.com 3. 配置Git 账户信息 直接执行就好了 没有信息提示1git config --global user.name &quot;username&quot; 1git config --global user.email &quot;email&quot; 执行以上步骤 可以生成SSH key 4. 查看SSH KEY1cat ~/.ssh/id_rsa.pub 出现如下图红色框区域 以ssh-rsa 开头 以邮箱结尾 则证明电脑存在公钥然后在githun账号中配置 上公钥即可]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
</search>
